# Copyright 2020 Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
name: Docker Community Edition
description: Installs Docker Community Edition from the Docker package repository, and enables the ubuntu user to manage Docker without using sudo. For more information, review the installation guide at https://docs.docker.com/install/linux/docker-ce/ubuntu/.
schemaVersion: 1.0
phases:
  - name: build
    steps:
      - name: OperatingSystemArchitecture
        action: ExecuteBash
        inputs:
          commands:
            - |
              ARCH=$(uname -m)
              case $ARCH in
                  'x86_64')
                      echo 'amd64'
                      ;;
                  'aarch64')
                      echo 'arm64'
                      ;;
                  *)
                      echo "The '$ARCH' architecture is not supported. Failing build."
                      exit 1
                      ;;
              esac
      - name: InstallHttpsPrerequisites
        action: ExecuteBash
        inputs:
          commands:
            - sudo apt-get update
            - sudo apt-get install -y apt-transport-https ca-certificates curl gnupg-agent software-properties-common
      - name: InstallDockerGPGKey
        action: ExecuteBash
        inputs:
          commands:
            - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      - name: InstallDockerRepository
        action: ExecuteBash
        inputs:
          commands:
            - |
              ARCH='{{build.OperatingSystemArchitecture.outputs.stdout}}'
              LSB_RELEASE=$(lsb_release -cs)

              SOURCE="deb [arch=$ARCH] https://download.docker.com/linux/ubuntu $LSB_RELEASE stable"
              SOURCE_REGEX="deb \[arch=$ARCH\] https:\/\/download\.docker\.com\/linux\/ubuntu $LSB_RELEASE stable"
              SOURCE_FILE=/etc/apt/sources.list

              cat $SOURCE_FILE | grep "^$SOURCE_REGEX"
              if [[ $? == 0 ]]; then
                echo "The repository already exists in the '$SOURCE_FILE' file, skipping repository installation."
              else
                echo "The repository does not exist in the '$SOURCE_FILE' file, installing repository..."
                sudo add-apt-repository "$SOURCE"
                echo 'The repository has been installed.'
              fi
      - name: InstallDockerCE
        action: ExecuteBash
        inputs:
          commands:
            - sudo apt-get update
            - sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            - sudo systemctl start docker
            - sudo systemctl enable docker
            - sudo usermod -a -G docker ubuntu
      - name: RebootToEnablePermissions
        action: Reboot
      - name: WaitDockerServiceStartupPostReboot
        action: ExecuteBash
        inputs:
          commands:
            - |
              STATUS=fail

              # Total sleep time ~180 seconds for service startup.
              echo 'Waiting for the Docker service to start...'
              for i in {0..35}
              do
                  CUR_STATE=$(systemctl is-active docker)
                  if [[ $CUR_STATE == "active" ]]; then
                      echo "Docker service is active."
                      STATUS=success
                      break
                  else
                      echo "Docker service is not yet active. State '$CUR_STATE'. Sleeping 5 seconds..."
                      sleep 5
                  fi
              done

              if [[ $STATUS == "fail" ]]; then
                  echo "Docker service failed to start within timeout period. Failing."
                  exit 1
              fi

  - name: validate
    steps:
      # Do not loop here to allow a fast fail if validate phase is executed separately
      - name: ValidateDockerService
        action: ExecuteBash
        inputs:
          commands:
            - |
              CUR_STATE=$(systemctl is-active docker)
              if [[ $CUR_STATE == "active" ]]; then
                  echo "Docker service is active."
                  exit 0
              else
                  echo "Docker service is not active. State '$CUR_STATE'. Failing."
                  exit 1
              fi
      - name: ValidateDockerCommandExists
        action: ExecuteBash
        inputs:
          commands:
            - |
              if type -P docker &>/dev/null; then
                  echo "Docker command exists."
                  exit 0
              else
                  echo "Docker command does not exist. Failing."
                  exit 1
              fi
      - name: ValidateDockerGroupMembership
        action: ExecuteBash
        inputs:
          commands:
            - |
              USER='ubuntu'
              GROUP='docker'
              if groups $USER | grep &>/dev/null "$GROUP"; then
                  echo "The '$USER' is a member of the '$GROUP' group."
                  exit 0
              else
                  echo "The '$USER' is not a member of the '$GROUP' group. Failing."
                  exit 1
              fi
